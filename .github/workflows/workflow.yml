on:
  push:
    tags:
      - 'v*'

name: Build and Release

jobs:

  release:
    name: 'Create Release from Tag'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:

      - name: Checkout
        uses: actions/checkout@master

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

  build:
    name: 'Build and Upload Release Binary'
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        OSes: ['windows', 'darwin', 'linux']
        arch: ['amd64']

    steps:
      - name: 'Checkout'
        uses: actions/checkout@master

      - name: 'Setup Golang Environment'
        uses: actions/setup-go@v2
        with:
          go-version: '^1.24'

      - name: 'Build ${{ matrix.OSes }}-${{ matrix.arch }}'
        run: |
          GOOS=${{ matrix.OSes }} \
          GOARCH=${{ matrix.arch }} \
          go build -trimpath -ldflags="-s -w -buildid=" \
            -o passdb_${{ matrix.OSes }}_${{ matrix.arch }}

      - name: 'Upload Release Assets'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./passdb_${{ matrix.OSes }}_${{ matrix.arch }}
          asset_name: passdb_${{ matrix.OSes }}_${{ matrix.arch }}
          asset_content_type: application/octet-stream

